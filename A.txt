import tensorflow as tf

class TimeSeriesWindowGenerator:
    def __init__(self, input_width, label_width, shift, label_columns=None):
        self.input_width = input_width
        self.label_width = label_width
        self.shift = shift

        self.label_columns = label_columns
        self.label_columns_indices = {name: i for i, name in enumerate(label_columns)} if label_columns else None

        self.total_window_size = input_width + shift
        self.input_slice = slice(0, input_width)
        self.labels_slice = slice(input_width, None)

    def split_window(self, features, method='continuous', interval=1):
        if method == 'continuous':
            inputs = features[:, self.input_slice, :]
            labels = features[:, self.labels_slice, :]
        elif method == 'interval':
            inputs = features[:, self.input_slice.start:self.input_slice.stop:interval, :]
            labels = features[:, self.labels_slice.start:self.labels_slice.stop:interval, :]

        if self.label_columns is not None:
            labels = tf.stack(
                [labels[:, :, self.label_columns_indices[name]] for name in self.label_columns],
                axis=-1
            )

        inputs.set_shape([None, self.input_width // interval, None])
        labels.set_shape([None, self.label_width // interval, None])

        return inputs, labels

    def make_dataset(self, data, method='continuous', interval=1, batch_size=32, shuffle=True, buffer_size=1000):
        ds = tf.keras.preprocessing.timeseries_dataset_from_array(
            data=data,
            targets=None,
            sequence_length=self.total_window_size,
            sequence_stride=1,
            shuffle=shuffle,
            batch_size=batch_size,
        )

        ds = ds.map(lambda x: self.split_window(x, method=method, interval=interval))
        return ds

# Example usage:
input_width = 24
label_width = 24
shift = 24
label_columns = ['feature1', 'feature2']

window_gen = TimeSeriesWindowGenerator(input_width, label_width, shift, label_columns)

data = ...  # Your time series data here
dataset_continuous = window_gen.make_dataset(data, method='continuous', batch_size=32)
dataset_interval = window_gen.make_dataset(data, method='interval', interval=3, batch_size=32)
